---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout>
  <div class="about-container">
    <h1 class="about-header">About</h1>
    
    <div class="about-content">
      <section class="about-section">
        <h2 class="about-subheader">The Project</h2>
        <p>
          Algorithmic Art Gallery is a modern, minimal web application that showcases generative art created through
          mathematical algorithms. The gallery generates trippy beautiful visual patterns using space-filling curves
          and color mapping algorithms, creating unique and vibrant algorithmic artwork.
        </p>
        <p>
          Each artwork is a unique manifestation of algorithmic processes, seed values, and color mappings,
          creating an endless possibility of visually stunning patterns. The combination of different parameters
          allows for virtually infinite unique generations.
        </p>
      </section>
      
      <section class="about-section">
        <h2 class="about-subheader">The Technology</h2>
        <p>
          Built with Astro and React, this application uses modern web technologies to provide a fast, 
          responsive experience. An interface inpired by frosted-glass aesthetic, featuring a dark mode theme with cyan accents
          that complements the vibrant colors of the generated art.
        </p>
        <p>
          This project was inspired by a video from Corridor Crew:
        </p>
        <h3 class="video-title">I Made Art That HACKS Your Eyes</h3>
        <div class="video-container">
          <iframe 
            width="560" 
            height="315" 
            src="https://www.youtube.com/embed/SxsN6FRXMWQ?si=p4sz9KDZs15OeUoL" 
            title="YouTube video player" 
            style="border: none;" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
            referrerpolicy="strict-origin-when-cross-origin" 
            allowfullscreen>
          </iframe>
        </div>
      </section>
      
      <section class="about-section">
        <h2 class="about-subheader">How It Works</h2>
        <p>
          1. <strong>Select Parameters</strong>: Customize your artwork by adjusting parameters in two main categories:
        </p>
        <ul class="parameter-list">
          <li><strong>Seed & Growth</strong>: Control the seed value, pattern size, growth mode, seed shape, and more</li>
          <li><strong>Color & Symmetry</strong>: Define color progression, curve type, color ordering, and symmetry options</li>
        </ul>
        <p>
          2. <strong>Generate</strong>: Our algorithm processes your parameters to create a unique piece of algorithmic art
        </p>
        <p>
          3. <strong>Export</strong>: Download your creation as a PNG or PDF file
        </p>
        <p>
          4. <strong>Save</strong>: Add your favorite generations to your personal gallery to revisit later
        </p>
      </section>
      
      <section class="about-section">
        <h2 class="about-subheader">Pattern Generation Options</h2>
        <p class="feature-intro">Click on any option below to learn more about it:</p>
        <div class="feature-grid">
          <div class="feature-item" data-feature="growth-modes">
            <div class="feature-header">
              <h3>Growth Modes</h3>
              <span class="feature-expand-icon">+</span>
            </div>
            <p class="feature-summary">Crystal, Nebula, Rings</p>
            <div class="feature-details">
              <ul>
                <li><strong>Crystal:</strong> Creates crystalline formations with angular structures, growing in a more geometric pattern.</li>
                <li><strong>Nebula:</strong> Produces cloud-like, organic shapes with diffused edges that resemble cosmic nebulae.</li>
                <li><strong>Rings:</strong> Generates concentric circles and orbital patterns that expand outward like ripples.</li>
              </ul>
            </div>
          </div>
          <div class="feature-item" data-feature="seed-shapes">
            <div class="feature-header">
              <h3>Seed Shapes</h3>
              <span class="feature-expand-icon">+</span>
            </div>
            <p class="feature-summary">Point, Circle, Line</p>
            <div class="feature-details">
              <ul>
                <li><strong>Point:</strong> Starts growth from a single point at the center, creating a radial expansion pattern.</li>
                <li><strong>Circle:</strong> Begins with a circular boundary that expands outward, creating ring-like structures.</li>
                <li><strong>Line:</strong> Initiates growth from a line across the center, creating mirror-like patterns.</li>
              </ul>
            </div>
          </div>
          <div class="feature-item" data-feature="symmetry">
            <div class="feature-header">
              <h3>Symmetry</h3>
              <span class="feature-expand-icon">+</span>
            </div>
            <p class="feature-summary">None, Bilateral, Quadrantal, Radial</p>
            <div class="feature-details">
              <ul>
                <li><strong>None:</strong> No symmetry applied - pattern grows freely in all directions without mirroring.</li>
                <li><strong>Bilateral:</strong> Mirror symmetry along a central axis, like a butterfly's wings.</li>
                <li><strong>Quadrantal:</strong> Four-way symmetry, mirrored in four quadrants from the center.</li>
                <li><strong>Radial:</strong> Circular symmetry, repeating pattern radiates from the center point.</li>
              </ul>
            </div>
          </div>
          <div class="feature-item" data-feature="color-progression">
            <div class="feature-header">
              <h3>Color Progression</h3>
              <span class="feature-expand-icon">+</span>
            </div>
            <p class="feature-summary">Sequential, Shuffled, Base Distance</p>
            <div class="feature-details">
              <ul>
                <li><strong>Sequential:</strong> Colors follow a strict sequence based on their position in the RGB space.</li>
                <li><strong>Shuffled:</strong> Colors are randomly arranged while maintaining visual coherence.</li>
                <li><strong>Base Distance:</strong> Colors are distributed based on their distance from a base color.</li>
              </ul>
            </div>
          </div>
          <div class="feature-item" data-feature="curve-types">
            <div class="feature-header">
              <h3>Curve Types</h3>
              <span class="feature-expand-icon">+</span>
            </div>
            <p class="feature-summary">Hilbert, Morton</p>
            <div class="feature-details">
              <ul>
                <li><strong>Hilbert:</strong> A space-filling curve that preserves locality well, creating smoother color transitions and more organic patterns.</li>
                <li><strong>Morton:</strong> Also known as Z-order curve, creates more blocky, quadrant-based patterns with distinct regions.</li>
              </ul>
            </div>
          </div>
          <div class="feature-item" data-feature="color-ordering">
            <div class="feature-header">
              <h3>Color Ordering</h3>
              <span class="feature-expand-icon">+</span>
            </div>
            <p class="feature-summary">HSV, HVS, SHV, SVH, VHS, VSH</p>
            <div class="feature-details">
              <ul>
                <li><strong>HSV:</strong> Arranges colors by Hue, Saturation, Value - emphasizing color families.</li>
                <li><strong>HVS:</strong> Arranges by Hue, Value, Saturation - emphasizing brightness variations within hues.</li>
                <li><strong>SHV:</strong> Arranges by Saturation, Hue, Value - grouping by color intensity first.</li>
                <li><strong>SVH:</strong> Arranges by Saturation, Value, Hue - emphasizing intensity and brightness patterns.</li>
                <li><strong>VHS:</strong> Arranges by Value, Hue, Saturation - creating bands of brightness.</li>
                <li><strong>VSH:</strong> Arranges by Value, Saturation, Hue - emphasizing brightness and intensity patterns.</li>
              </ul>
            </div>
          </div>
        </div>
      </section>
      
      <section class="about-section technical-specs">
        <h2 class="about-subheader">Technical Specifications</h2>
        <ul>
          <li><span class="spec-label">Pattern Sizes:</span> From 128×128 to 4096×4096 pixels</li>
          <li><span class="spec-label">Algorithms:</span> Hilbert Curve, Morton Curve (Z-order)</li>
          <li><span class="spec-label">Export Options:</span> PNG and PDF formats</li>
          <li><span class="spec-label">Settings Storage:</span> Browser local storage for saved settings</li>
        </ul>
      </section>
    </div>
  </div>
</BaseLayout>

<script is:inline>
  // Feature cards expand/collapse functionality
  document.addEventListener('DOMContentLoaded', () => {
    const featureItems = document.querySelectorAll('.feature-item');
    
    featureItems.forEach(item => {
      if (!(item instanceof HTMLElement)) return;
      
      // Set initial ARIA attributes
      item.setAttribute('role', 'button');
      item.setAttribute('tabindex', '0');
      item.setAttribute('aria-expanded', 'false');
      const dataFeature = item.getAttribute('data-feature') || 'feature';
      const detailsId = `details-${dataFeature}`;
      const details = item.querySelector('.feature-details');
      if (details) {
        details.id = detailsId;
        item.setAttribute('aria-controls', detailsId);
      }
      
      // Add click and keyboard event handlers
      item.addEventListener('click', (e) => {
        // Add click effect
        addClickEffect(item);
        toggleFeature(item, featureItems);
      });
      item.addEventListener('keydown', (e) => {
        // Ensure e is a KeyboardEvent before accessing key property
        if (e instanceof KeyboardEvent && (e.key === 'Enter' || e.key === ' ')) {
          e.preventDefault();
          // Add click effect
          addClickEffect(item);
          toggleFeature(item, featureItems);
        }
      });
    });
    
    function addClickEffect(item) {
      if (!(item instanceof HTMLElement)) return;
      
      // Add click effect class
      item.classList.add('click-effect');
      
      // Remove the class after animation completes
      setTimeout(() => {
        item.classList.remove('click-effect');
      }, 150);
    }
    
    function toggleFeature(item, allItems) {
      if (!(item instanceof HTMLElement)) return;
      
      // Toggle active class
      const wasActive = item.classList.contains('active');
      
      // Close all items
      allItems.forEach(otherItem => {
        if (!(otherItem instanceof HTMLElement)) return;
        
        otherItem.classList.remove('active');
        otherItem.setAttribute('aria-expanded', 'false');
        const otherIcon = otherItem.querySelector('.feature-expand-icon');
        if (otherIcon) otherIcon.textContent = '+';
      });
      
      // If the clicked item wasn't active before, make it active
      if (!wasActive) {
        item.classList.add('active');
        item.setAttribute('aria-expanded', 'true');
        const expandIcon = item.querySelector('.feature-expand-icon');
        if (expandIcon) expandIcon.textContent = '−';
      }
    }
  });
</script>

<style>
  .about-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .about-header {
    font-size: 3rem;
    font-weight: 800;
    color: #67e8f9;
    margin-bottom: 2.5rem;
    text-align: center;
    text-shadow: 0 0 16px #67e8f9, 0 2px 8px #1a2235;
  }
  
  .about-content {
    background-color: rgba(26, 34, 53, 0.8);
    backdrop-filter: blur(16px);
    border-radius: 1rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.7);
    padding: 2.5rem;
    color: white;
  }
  
  .about-section {
    margin-bottom: 3rem;
  }
  
  .about-section:last-child {
    margin-bottom: 0;
  }
  
  .about-subheader {
    font-size: 1.75rem;
    font-weight: 700;
    color: #67e8f9;
    margin-bottom: 1.25rem;
    text-shadow: 0 0 8px rgba(103, 232, 249, 0.3);
  }
  
  .about-content p {
    font-size: 1.1rem;
    line-height: 1.7;
    margin-bottom: 1.25rem;
    color: #e2e8f0;
  }
  
  .parameter-list {
    list-style-type: disc;
    padding-left: 2rem;
    margin-bottom: 1.25rem;
  }
  
  .parameter-list li {
    font-size: 1.1rem;
    line-height: 1.7;
    color: #e2e8f0;
    margin-bottom: 0.5rem;
  }
  
  .feature-intro {
    text-align: center;
    margin-bottom: 2rem;
    font-style: italic;
    color: #a5f3fc;
  }
  
  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }
  
  .feature-item {
    background-color: rgba(15, 23, 42, 0.6);
    border-radius: 0.5rem;
    padding: 1.25rem;
    border: 1px solid rgba(103, 232, 249, 0.2);
    transition: all 0.3s ease;
    cursor: pointer;
    overflow: hidden;
  }
  
  .feature-item:hover {
    border-color: rgba(103, 232, 249, 0.4);
    box-shadow: 0 0 15px rgba(103, 232, 249, 0.2);
    transform: translateY(-2px);
  }
  
  .feature-item.click-effect {
    transform: scale(0.98);
    box-shadow: 0 0 8px rgba(103, 232, 249, 0.4) inset;
    background-color: rgba(15, 23, 42, 0.8);
  }
  
  .feature-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .feature-expand-icon {
    color: #67e8f9;
    font-size: 1.5rem;
    font-weight: 300;
    line-height: 1;
  }
  
  .feature-item h3 {
    font-size: 1.25rem;
    color: #67e8f9;
    margin-bottom: 0.5rem;
    font-weight: 600;
  }
  
  .feature-summary {
    font-size: 1rem;
    margin-bottom: 0;
    color: #e2e8f0;
  }
  
  .feature-details {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    transition: all 0.5s ease;
    margin-top: 0;
  }
  
  .feature-item.active {
    background-color: rgba(15, 23, 42, 0.8);
  }
  
  .feature-item.active .feature-details {
    max-height: 500px;
    opacity: 1;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(103, 232, 249, 0.2);
  }
  
  .feature-details ul {
    padding-left: 1.25rem;
    margin: 0;
  }
  
  .feature-details li {
    margin-bottom: 0.75rem;
    color: #e2e8f0;
    font-size: 0.95rem;
    line-height: 1.6;
  }
  
  .feature-details li:last-child {
    margin-bottom: 0;
  }
  
  .technical-specs ul {
    list-style: none;
    padding: 0;
  }
  
  .technical-specs li {
    padding: 0.75rem 0;
    font-size: 1.1rem;
    border-bottom: 1px solid rgba(103, 232, 249, 0.2);
  }
  
  .technical-specs li:last-child {
    border-bottom: none;
  }
  
  .spec-label {
    color: #67e8f9;
    font-weight: 600;
    margin-right: 0.5rem;
  }
  
  strong {
    color: #67e8f9;
    font-weight: 600;
  }
  
  @media (max-width: 768px) {
    .about-container {
      padding: 1.5rem;
    }
    
    .about-content {
      padding: 1.75rem;
    }
    
    .about-header {
      font-size: 2.5rem;
      margin-bottom: 2rem;
    }
    
    .about-subheader {
      font-size: 1.5rem;
    }
    
    .about-content p {
      font-size: 1rem;
    }
    
    .feature-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
  
  .video-container {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
    margin-bottom: 2rem;
    border-radius: 0.5rem;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(103, 232, 249, 0.2);
  }
  
  .video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
  }
  
  .video-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #67e8f9;
    margin-bottom: 1rem;
    text-align: center;
  }
</style> 